from aiogram import Router, F
from aiogram.enums import InputMediaType
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.utils.media_group import MediaGroupBuilder

from backup import create_backup
from callbacks.calldata import MyCallback
from constants.const import *
from converters.csv_converter import *
from database.models import *
from database.request import get_book_from_id, get_all_book_ids, get_book_id_from_user_favorites, has_favorites
from keyboards.builders import genres_kb
from keyboards.reply import convert_menu, main_kb, search_settings
from str_equal import is_names_equal

router = Router()


@router.message(F.text == GENRES)
async def genres(message: Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã:", reply_markup=genres_kb())


@router.message(F.text == "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
async def top(message: Message):
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞", reply_markup=search_settings)


@router.message(F.text == "–í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def top(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç", reply_markup=convert_menu)


@router.message(F.text == "–ù–∞–∑–∞–¥")
async def top(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb)


@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å backup")
async def top(message: Message):
    await message.answer("Backup —Å–æ–∑–¥–∞–Ω")
    await create_backup()


@router.message(F.text == "CSV")
async def get_data_on_csv(message: Message):
    tables = [User, BookTable, Favorites, Genre, GenreSearcher]
    tables_name = ["user", "book", "favorites", "genres", "genre_searcher"]

    for i in range(len(tables)):
        write_to_csv(tables[i], f"convert/{tables_name[i]}")

    media = MediaGroupBuilder()

    for table_name in tables_name:
        media.add(type=InputMediaType.DOCUMENT, media=FSInputFile(f"convert/{table_name}.csv"))

    await message.answer_media_group(media=media.build())


@router.message(F.text == "Json")
async def get_data_on_json(message: Message):
    tables = [User, BookTable, Favorites, Genre, GenreSearcher]
    tables_name = ["user", "book", "favorites", "genres", "genre_searcher"]

    for i in range(len(tables)):
        write_to_json(tables[i], f"convert/{tables_name[i]}")

    media = MediaGroupBuilder()

    for table_name in tables_name:
        media.add(type=InputMediaType.DOCUMENT, media=FSInputFile(f"convert/{table_name}.json"))

    await message.answer_media_group(media=media.build())


@router.message(F.text == "Excel")
async def get_data_on_excel(message: Message):
    tables = [User, BookTable, Favorites, Genre, GenreSearcher]
    tables_name = ["user", "book", "favorites", "genres", "genre_searcher"]

    for i in range(len(tables)):
        write_to_excel(tables[i], f"convert/{tables_name[i]}")

    media = MediaGroupBuilder()

    for table_name in tables_name:
        media.add(type=InputMediaType.DOCUMENT, media=FSInputFile(f"convert/{table_name}.xlsx"))

    await message.answer_media_group(media=media.build())


@router.message(F.text == FAVORITES)
async def favorites(message: Message):
    if has_favorites(message.from_user.id):
        book_ids = get_book_id_from_user_favorites(message.from_user.id)
        buttons = []
        for book_id in book_ids:
            book = get_book_from_id(book_id)

            button = InlineKeyboardButton(text=book.name,
                                          callback_data=MyCallback(foo="send", bar=str(book_id)).pack())
            buttons.append([button])

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(f"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ:, {message.from_user.first_name}", reply_markup=kb)
    else:
        await message.answer("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ")


@router.message(F.text == SEARCH)
async def search(message: Message):
    await message.answer("–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")


@router.message()
async def find_book(message: Message):
    msg_text = message.text

    all_book_ids = get_all_book_ids()

    buttons = []
    for book_id in all_book_ids:
        book = get_book_from_id(book_id)

        if is_names_equal(book.name, msg_text):
            button = InlineKeyboardButton(text=book.name,
                                          callback_data=MyCallback(foo="send", bar=str(book_id)).pack())
            buttons.append([button])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    if len(buttons) > 0:
        text = f'–í–æ—Ç, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{msg_text}"'
    else:
        text = f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üòî\n \n' \
               f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏'

    await message.answer(text=text, reply_markup=kb)
